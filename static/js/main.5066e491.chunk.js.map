{"version":3,"sources":["components/Drink.js","components/ConfirmationPopover/Slider.js","components/ConfirmationPopover/SliderContainer.js","components/ConfirmationPopover/index.js","App.js","serviceWorker.js","index.js"],"names":["capitalize","s","toUpperCase","slice","DrinkWrapper","styled","div","_templateObject","DrinkNameWrapper","span","_templateObject2","Drink","_ref","drink","onClick","react_default","a","createElement","src","concat","icon","alt","height","width","name","SliderWrapper","Slider_templateObject","props","startPos","currentPos","pos","calculatePosition","Slider","onTouchStart","onTouchMove","onTouchEnd","chevron_right_default","size","SliderContainer","state","sliderStartPos","sliderCurrentPos","_this2","this","SliderOutlineWrapper","ConfirmationPopover_Slider","ev","setState","touches","clientX","onConfirm","Component","SliderContainer_templateObject","ConfirmationPopover","swipePos","ModalWrapper","TitleBarWrapper","CloseButtonWrapper","onHide","x_default","ModalTextWrapper","ConfirmationPopover_SliderContainer","console","log","slideIn","keyframes","ConfirmationPopover_templateObject","ConfirmationPopover_templateObject2","_templateObject3","_templateObject4","_templateObject5","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","callApi","asyncToGenerator","regenerator_default","mark","_callee","response","body","wrap","_context","prev","next","fetch","sent","json","status","Error","message","abrupt","stop","drinks","dialog","handleClick","bind","assertThisInitialized","components_ConfirmationPopover","_this3","AppWrapper","HeaderWrapper","DrinksWrapper","length","map","components_Drink","key","injectGlobal","App_templateObject","App_templateObject2","App_templateObject3","App_templateObject4","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5066e491.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Drink = ({ drink, onClick }) => (\n  <DrinkWrapper onClick={onClick}>\n    <img\n      src={`icon/${drink.icon}.svg`}\n      alt=\"drink icon\"\n      height={26}\n      width={26}\n    />\n    <DrinkNameWrapper>\n      {capitalize(drink.name)}\n    </DrinkNameWrapper>\n  </DrinkWrapper>\n);\n\nDrink.propTypes = {\n  drink: PropTypes.shape({\n    name: PropTypes.string,\n    icon: PropTypes.string\n  }),\n  onClick: PropTypes.func\n};\n\nconst capitalize = (s) => s && s[0].toUpperCase() + s.slice(1);\n\nconst DrinkWrapper = styled.div`\n  width: 90vw;\n  max-width: 400px;\n  display: flex;\n  align-items: center;\n  background-color: white;\n  padding: 10px;\n  margin: 15px 5px;\n  border-radius: 5px;\n  box-shadow: 0 5px 0 0 #555;\n`;\n\nconst DrinkNameWrapper = styled.span`\n  font-size: 1.5em;\n  margin-left: 20px;\n`;\n\nexport default Drink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport ChevronRight from 'react-feather/dist/icons/chevron-right';\n\nconst Slider = ({ onTouchStart, onTouchMove, onTouchEnd, startPos, currentPos }) => (\n  <SliderWrapper\n    onTouchStart={onTouchStart}\n    onTouchMove={onTouchMove}\n    onTouchEnd={onTouchEnd}\n    startPos={startPos}\n    currentPos={currentPos}\n  >\n    <ChevronRight size={28}/>\n  </SliderWrapper>\n);\n\nSlider.propTypes = {\n  onTouchStart: PropTypes.func,\n  onTouchMove: PropTypes.func,\n  onTouchEnd: PropTypes.func,\n  startPos: PropTypes.number,\n  currentPos: PropTypes.number\n};\n\nconst calculatePosition = (startPos, currentPos) => {\n  const pos = currentPos - startPos;\n\n  // clamp between 0 and 220px\n  if (pos <= 0)\n    return 0;\n  else if (pos >= 220)\n    return '220px';\n  else\n    return `${pos}px`;\n};\n\nconst SliderWrapper = styled.div`\n  width: 80px;\n  height: 80px;\n  border-radius: 50%;\n  background-color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: ${props => calculatePosition(props.startPos, props.currentPos)}\n  transition: margin 80ms;\n`;\n\nexport default Slider;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport Slider from './Slider';\n\nclass SliderContainer extends Component {\n  state = {\n    sliderStartPos: 0,\n    sliderCurrentPos: 0\n  };\n\n  render() {\n    const handleTouchStart = (ev) => this.setState({\n      sliderStartPos: ev.touches[0].clientX,\n      sliderCurrentPos: ev.touches[0].clientX\n    });\n\n    const handleTouchMove = (ev) => this.setState({\n      sliderCurrentPos: ev.touches[0].clientX\n    });\n\n    const handleTouchEnd = () => this.state.sliderCurrentPos - this.state.sliderStartPos >= 220\n      ? this.props.onConfirm()\n      : this.setState({\n        sliderStartPos: 0,\n        sliderCurrentPos: 0\n      });\n\n    return (\n      <SliderOutlineWrapper>\n        <Slider\n          onTouchStart={handleTouchStart}\n          onTouchMove={handleTouchMove}\n          onTouchEnd={handleTouchEnd}\n          startPos={this.state.sliderStartPos}\n          currentPos={this.state.sliderCurrentPos}\n        />\n      </SliderOutlineWrapper>\n    )\n  }\n}\n\nSliderContainer.propTypes = {\n  onConfirm: PropTypes.func\n};\n\nconst SliderOutlineWrapper = styled.div`\n  width: 300px;\n  height: 80px;\n  border: 3px solid #ffbd98;\n  background-color: #ffbd98;\n  border-radius: 43px;\n  margin-bottom: 5vh;\n`;\n\nexport default SliderContainer;\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport styled, {keyframes} from 'styled-components';\nimport Close from 'react-feather/dist/icons/x';\n\nimport Slider from './SliderContainer';\n\nclass ConfirmationPopover extends Component {\n  state = {\n    swipePos: 0\n  };\n\n  render() {\n    const handleConfirm = () => {\n      // TODO: Laita toimimaan\n      console.log('Juoma tilattu!');\n      this.props.onHide();\n    };\n\n    return (\n      <ModalWrapper>\n\n        <TitleBarWrapper>\n          <CloseButtonWrapper onClick={this.props.onHide}>\n            <Close size={28}/>\n          </CloseButtonWrapper>\n        </TitleBarWrapper>\n\n        <ModalTextWrapper>\n          Tilataanko <strong>{this.props.drink.name}</strong>?\n        </ModalTextWrapper>\n\n        <Slider onConfirm={handleConfirm}/>\n      </ModalWrapper>\n    )\n  }\n}\n\nConfirmationPopover.propTypes = {\n  drink: PropTypes.object,\n  onConfirm: PropTypes.func,\n  onHide: PropTypes.func\n};\n\nconst slideIn = keyframes`\n  from {left: -100vh; opacity: 0.5}\n  to {left: 0; opacity: 1}\n`;\n\nconst ModalWrapper = styled.div`\n  position: fixed;\n  bottom: 0;\n  z-index: 999;\n  background-color: white;\n  width: 100vw;\n  height: calc(100vh - 55px);\n  \n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  \n  animation: ${slideIn} 400ms 0s both;\n`;\n\nconst TitleBarWrapper = styled.div`\n  font-size: 1.5em;\n  padding: 6px;\n  width: 90vw;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst CloseButtonWrapper = styled.span`\n  font-size: 1.5em;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst ModalTextWrapper = styled.span`\n  font-size: 1.5em;\n  text-align: center;\n`;\n\n\nexport default ConfirmationPopover;\n","import React, {Component} from 'react';\nimport styled, {injectGlobal} from 'styled-components';\n\nimport Drink from './components/Drink';\nimport ConfirmationPopover from \"./components/ConfirmationPopover\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      drinks: [\n          {\n            name: 'olut',\n            icon: 'beer'\n          },\n          {\n            name: 'siideri',\n            icon: 'glass'\n          },\n          {\n            name: 'lonkero',\n            icon: 'glass'\n\n          },\n          {\n            name: 'jallu',\n            icon: 'shot'\n          },\n          {\n            name: 'skumppa',\n            icon: 'wine'\n          },\n          {\n            name: 'karpaloharhautus',\n            icon: 'drink'\n          }\n        ],\n      dialog: null\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  callApi = async () => {\n    const response = await fetch('/api/drinks');\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n  };\n\n  handleClick(drink) {\n    const onHide = () => this.setState({ dialog: null });\n    const dialog = (\n      <ConfirmationPopover\n        drink={drink}\n        onHide={onHide}\n      />\n    );\n    this.setState({ dialog });\n  }\n\n  render() {\n    return (\n      <AppWrapper>\n        <HeaderWrapper>Digit 20v</HeaderWrapper>\n        <DrinksWrapper>\n          {\n            this.state.drinks.length > 0\n              ? this.state.drinks.map(drink => (\n                <Drink\n                  key={drink.name}\n                  drink={drink}\n                  onClick={() => this.handleClick(drink)}\n                />\n              ))\n              : <p>Ladataan juomia...</p>\n          }\n        </DrinksWrapper>\n        {this.state.dialog}\n      </AppWrapper>\n    );\n  }\n}\n\ninjectGlobal`\n  body {\n    background-color: salmon;\n    font-family: 'Open Sans', sans-serif;\n  }\n`;\n\nconst HeaderWrapper = styled.div`\n  padding: 10px;\n  font-size: 5em;\n  font-family: 'Lobster', serif;\n  text-align: center;\n`;\n\nconst DrinksWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst AppWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}